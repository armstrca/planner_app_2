  <head>
    <title>Interactive Calendar Prototype</title>
    <style>
      /* Approximate height calculation, adjust the numerator as needed */
      body {
        margin: 0;
        padding: 0;
      }
      .calendar-grid {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 0;
        padding: 0;
        background-color: white;
        width: 100vw;
        grid-template-rows: auto repeat(5, var(--cell-height));
      }
      .calendar-cell,
      .calendar-header {
        background-color: #ffffff;
        border: 0.1px solid #000000;
        display: flex;
        border-radius: 0;
        height: var(
          --cell-height
        ); /* Use the variable for consistent cell height */
      }
      .calendar-header {
        font-weight: 600;
        height: 60px; /* Fixed height for header, adjust as needed */
        display: flex;
        border: 0;
        align-items: center;
        justify-content: center;
        background-image: linear-gradient(180deg, white, rgb(202, 202, 202));
      }
      .calendar-cell {
        align-items: start;
        justify-content: end;
        font-size: medium;
        padding-inline-end: 0.5rem;
      }
      .half-height {
        height: calc(var(--cell-height) / 2);
        padding-bottom: calc(
          -var(--cell-height) / 2
        ); /* Half the height of a standard cell */
      }
      .moved-up {
        position: relative;
        top: calc(
          var(--cell-height) / -2
        ); /* Move the cell up by half its height */
      }
      .input-container {
        display: flex;
        justify-content: center;
        margin-top: 20px;
      }
      .input-field {
        margin-right: 10px;
        padding: 5px;
        border: 1px solid #ddd;
        border-radius: 4px;
      }
      .submit-button {
        padding: 5px 15px;
        background-color: #fef3c7;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-weight: 600;
      }
    </style>
  </head>
  <body>
  <%= content_tag(:div, "", id:"app", style:"height: 100%, width: 100%", data: {
    controller: "react"
  })%>

    <div class="input-container">
      <input
        type="number"
        id="yearInput"
        class="input-field"
        placeholder="Year"
        min="0"
      />
      <input
        type="number"
        id="monthInput"
        class="input-field"
        placeholder="Month (1-12)"
        min="1"
        max="12"
      />
      <button id="submitBtn" class="submit-button">Show Calendar</button>
    </div>
    <div id="calendar" class="calendar-grid"></div>

    <script>
      function generateCalendar(year, month) {
        const firstDay = new Date(year, month - 1, 1);
        const daysInMonth = new Date(year, month, 0).getDate();
        const startDayOfWeek = firstDay.getDay();
        const calendar = document.getElementById('calendar');
        calendar.innerHTML = ''; // Clear previous calendar display

        // Calendar headers
        const daysOfWeek = [
          'Sunday',
          'Monday',
          'Tuesday',
          'Wednesday',
          'Thursday',
          'Friday',
          'Saturday',
        ];
        daysOfWeek.forEach(
          (day) =>
            (calendar.innerHTML += `<div class="calendar-header">${day}</div>`)
        );

        // Fill in the blanks for days before the first of the month
        for (let i = 0; i < startDayOfWeek; i++) {
          calendar.innerHTML += `<div class="calendar-cell"></div>`;
        }

        let isEdgeCaseHandled = false;

        // Main logic for filling in day cells
        for (let day = 1; day <= daysInMonth; day++) {
          let cell = document.createElement('div');
          cell.className = 'calendar-cell';
          cell.textContent = day;

          // Handle specific adjustments for edge cases
          if (
            (daysInMonth === 31 &&
              startDayOfWeek === 5 &&
              (day === 24 || day === 31)) ||
            (daysInMonth === 31 &&
              startDayOfWeek === 6 &&
              (day === 23 || day === 24 || day === 30 || day === 31)) ||
            (daysInMonth === 30 &&
              startDayOfWeek === 6 &&
              (day === 23 || day === 30))
          ) {
            cell.classList.add('half-height');
            if (
              (daysInMonth === 31 && startDayOfWeek === 5 && day === 31) ||
              (daysInMonth === 31 &&
                startDayOfWeek === 6 &&
                (day === 30 || day === 31)) ||
              (daysInMonth === 30 && startDayOfWeek === 6 && day === 30)
            ) {
              cell.classList.add('moved-up');
            }
            isEdgeCaseHandled = day === daysInMonth; // Set to true if handling the last day of the month in edge cases
          }

          calendar.appendChild(cell);
        }

        // Adjust calendar grid columns based on the total number of cells, avoiding adding empty cells for specific edge cases
        const totalCellsFilled = startDayOfWeek + daysInMonth;
        const remainingCells = isEdgeCaseHandled
          ? 0
          : totalCellsFilled % 7
          ? 7 - (totalCellsFilled % 7)
          : 0;
        for (let i = 0; i < remainingCells; i++) {
          calendar.innerHTML += `<div class="calendar-cell"></div>`; // Do not fill in the blanks if it's an edge case
        }
      }

      document.getElementById('submitBtn').addEventListener('click', () => {
        const year = parseInt(document.getElementById('yearInput').value, 10);
        const month = parseInt(document.getElementById('monthInput').value, 10);
        if (year && month) {
          generateCalendar(year, month);
        } else {
          alert('Please enter both year and month.');
        }
      });

      // Initial call to display the current month and year by default
      const currentDate = new Date();
      generateCalendar(currentDate.getFullYear(), currentDate.getMonth() + 1);
      function adjustCellHeights() {
        const calendarHeight =
          window.innerHeight -
          document.querySelector('.input-container').offsetHeight;
        const cellHeight = calendarHeight / 6; // 7 to account for header row + 6 rows of days
        document.documentElement.style.setProperty(
          '--cell-height',
          `${cellHeight}px`
        );
      }

      // Adjust cell heights on initial load and window resize
      window.addEventListener('load', adjustCellHeights);
      window.addEventListener('resize', adjustCellHeights);

      document.getElementById('submitBtn').addEventListener('click', () => {
        const year = parseInt(document.getElementById('yearInput').value, 10);
        const month = parseInt(document.getElementById('monthInput').value, 10);
        if (year && month) {
          generateCalendar(year, month);
          setTimeout(adjustCellHeights, 100); // Ensure the calendar is generated before adjusting heights
        } else {
          alert('Please enter both year and month.');
        }
      });
    </script>
  </body>
</html>
