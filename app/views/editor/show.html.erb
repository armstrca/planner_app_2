<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Draggable and Resizable Canvas</title>
    <script src="https://unpkg.com/interactjs/dist/interact.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
      body {
          font-family: 'Roboto', sans-serif;
      }
      .canvas {
          position: relative;
          width: 100%;
          height: 90vh;
          margin-top: 2.5vh;
          background-color: #f0f0f0;
          border: 1px solid #ccc;
          display: grid;
          grid-template-columns: repeat(auto-fill, 20px);
          grid-template-rows: repeat(auto-fill, 20px);
      }
      .draggable {
          position: absolute;
          background-color: #4A90E2;
          color: white;
          display: flex;
          align-items: center;
          justify-content: center;
          cursor: move;
      }
      .palette {
          display: grid;
          grid-template-columns: repeat(2, 1fr);
          gap: 10px;
          margin-top: 2.5vh;

          max-height: 90vh;
          overflow-y: auto;
          min-width: 35vh
      }
      .palette .color-box {
          width: 100px;
          height: 50px;
          border: 2px solid;
          cursor: pointer;
      }
      .remove-btn {
          position: absolute;
          top: 0;
          right: 0;
          background-color: red;
          color: white;
          border: none;
          cursor: pointer;
          padding: 2px 5px;
          font-size: 12px;
      }
    </style>
  </head>
  <body class="bg-white text-gray-800">
    <div class="container mx-auto p-4">

      <div class="flex">
        <div class="canvas" id="canvas">
          <div class="draggable" id="draggable" style="width: 60px; height: 60px;">
            Drag me
            <button class="remove-btn" onclick="removeElement(this)">X</button>
          </div>
        </div>
        <div class="palette ml-6">
          <div class="color-box" style="background-color: #DCE6F1; border-color: #4A90E2;" data-color="#DCE6F1"></div>
          <div class="color-box" style="background-color: #FDE9D9; border-color: #F5A623;" data-color="#FDE9D9"></div>
          <div class="color-box" style="background-color: #F8D7DA; border-color: #D0021B;" data-color="#F8D7DA"></div>
          <div class="color-box" style="background-color: #EDE7F6; border-color: #8E44AD;" data-color="#EDE7F6"></div>
          <div class="color-box" style="background-color: #D1F2EB; border-color: #1ABC9C;" data-color="#D1F2EB"></div>
          <div class="color-box" style="background-color: #F3E5F5; border-color: #9B59B6;" data-color="#F3E5F5"></div>

          <div class="color-box" style="background-color: #DCE6F1; border-color: #4A90E2;" data-color="#DCE6F1"></div>
          <div class="color-box" style="background-color: #FDE9D9; border-color: #F5A623;" data-color="#FDE9D9"></div>
          <div class="color-box" style="background-color: #F8D7DA; border-color: #D0021B;" data-color="#F8D7DA"></div>
          <div class="color-box" style="background-color: #EDE7F6; border-color: #8E44AD;" data-color="#EDE7F6"></div>
          <div class="color-box" style="background-color: #D1F2EB; border-color: #1ABC9C;" data-color="#D1F2EB"></div>
          <div class="color-box" style="background-color: #F3E5F5; border-color: #9B59B6;" data-color="#F3E5F5"></div>

          <div class="color-box" style="background-color: #DCE6F1; border-color: #4A90E2;" data-color="#DCE6F1"></div>
          <div class="color-box" style="background-color: #FDE9D9; border-color: #F5A623;" data-color="#FDE9D9"></div>
          <div class="color-box" style="background-color: #F8D7DA; border-color: #D0021B;" data-color="#F8D7DA"></div>
          <div class="color-box" style="background-color: #EDE7F6; border-color: #8E44AD;" data-color="#EDE7F6"></div>
          <div class="color-box" style="background-color: #D1F2EB; border-color: #1ABC9C;" data-color="#D1F2EB"></div>
          <div class="color-box" style="background-color: #F3E5F5; border-color: #9B59B6;" data-color="#F3E5F5"></div>

          <div class="color-box" style="background-color: #DCE6F1; border-color: #4A90E2;" data-color="#DCE6F1"></div>
          <div class="color-box" style="background-color: #FDE9D9; border-color: #F5A623;" data-color="#FDE9D9"></div>
          <div class="color-box" style="background-color: #F8D7DA; border-color: #D0021B;" data-color="#F8D7DA"></div>
          <div class="color-box" style="background-color: #EDE7F6; border-color: #8E44AD;" data-color="#EDE7F6"></div>
          <div class="color-box" style="background-color: #D1F2EB; border-color: #1ABC9C;" data-color="#D1F2EB"></div>
          <div class="color-box" style="background-color: #F3E5F5; border-color: #9B59B6;" data-color="#F3E5F5"></div>

          <div class="color-box" style="background-color: #DCE6F1; border-color: #4A90E2;" data-color="#DCE6F1"></div>
          <div class="color-box" style="background-color: #FDE9D9; border-color: #F5A623;" data-color="#FDE9D9"></div>
          <div class="color-box" style="background-color: #F8D7DA; border-color: #D0021B;" data-color="#F8D7DA"></div>
          <div class="color-box" style="background-color: #EDE7F6; border-color: #8E44AD;" data-color="#EDE7F6"></div>
          <div class="color-box" style="background-color: #D1F2EB; border-color: #1ABC9C;" data-color="#D1F2EB"></div>
          <div class="color-box" style="background-color: #F3E5F5; border-color: #9B59B6;" data-color="#F3E5F5"></div>

          <div class="color-box" style="background-color: #DCE6F1; border-color: #4A90E2;" data-color="#DCE6F1"></div>
          <div class="color-box" style="background-color: #FDE9D9; border-color: #F5A623;" data-color="#FDE9D9"></div>
          <div class="color-box" style="background-color: #F8D7DA; border-color: #D0021B;" data-color="#F8D7DA"></div>
          <div class="color-box" style="background-color: #EDE7F6; border-color: #8E44AD;" data-color="#EDE7F6"></div>
          <div class="color-box" style="background-color: #D1F2EB; border-color: #1ABC9C;" data-color="#D1F2EB"></div>
          <div class="color-box" style="background-color: #F3E5F5; border-color: #9B59B6;" data-color="#F3E5F5"></div>

        </div>
      </div>
    </div>

    <script>
      interact('.draggable')
          .draggable({
              modifiers: [
                  interact.modifiers.snap({
                      targets: [
                          interact.snappers.grid({ x: 20, y: 20 })
                      ],
                      range: Infinity,
                      relativePoints: [{ x: 0, y: 0 }]
                  }),
                  interact.modifiers.restrict({
                      restriction: "parent",
                      endOnly: true
                  })
              ],
              inertia: true,
              onmove: dragMoveListener
          })
          .resizable({
              edges: { left: true, right: true, bottom: true, top: true },
              modifiers: [
                  interact.modifiers.snapSize({
                      targets: [
                          interact.snappers.grid({ x: 20, y: 20 })
                      ]
                  }),
                  interact.modifiers.restrictSize({
                      min: { width: 20, height: 20 }
                  })
              ],
              inertia: true
          })
          .on('resizemove', function (event) {
              let target = event.target;
              let x = (parseFloat(target.getAttribute('data-x')) || 0);
              let y = (parseFloat(target.getAttribute('data-y')) || 0);

              target.style.width = event.rect.width + 'px';
              target.style.height = event.rect.height + 'px';

              x += event.deltaRect.left;
              y += event.deltaRect.top;

              target.style.transform = 'translate(' + x + 'px,' + y + 'px)';

              target.setAttribute('data-x', x);
              target.setAttribute('data-y', y);
          });

      function dragMoveListener(event) {
          let target = event.target;
          let x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx;
          let y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;

          target.style.transform = 'translate(' + x + 'px, ' + y + 'px)';

          target.setAttribute('data-x', x);
          target.setAttribute('data-y', y);
      }

      window.dragMoveListener = dragMoveListener;

      document.querySelectorAll('.color-box').forEach(box => {
          box.addEventListener('click', function() {
              let newBox = document.createElement('div');
              newBox.classList.add('draggable');
              newBox.style.width = '100px';
              newBox.style.height = '50px';
              newBox.style.backgroundColor = this.dataset.color;
              newBox.style.borderColor = this.style.borderColor;
              newBox.innerHTML = '<button class="remove-btn" onclick="removeElement(this)">X</button>';
              document.getElementById('canvas').appendChild(newBox);
              interact(newBox).draggable({
                  modifiers: [
                      interact.modifiers.snap({
                          targets: [
                              interact.snappers.grid({ x: 20, y: 20 })
                          ],
                          range: Infinity,
                          relativePoints: [{ x: 0, y: 0 }]
                      }),
                      interact.modifiers.restrict({
                          restriction: "parent",
                          endOnly: true
                      })
                  ],
                  inertia: true,
                  onmove: dragMoveListener
              }).resizable({
                  edges: { left: true, right: true, bottom: true, top: true },
                  modifiers: [
                      interact.modifiers.snapSize({
                          targets: [
                              interact.snappers.grid({ x: 20, y: 20 })
                          ]
                      }),
                      interact.modifiers.restrictSize({
                          min: { width: 20, height: 20 }
                      })
                  ],
                  inertia: true
              }).on('resizemove', function (event) {
                  let target = event.target;
                  let x = (parseFloat(target.getAttribute('data-x')) || 0);
                  let y = (parseFloat(target.getAttribute('data-y')) || 0);

                  target.style.width = event.rect.width + 'px';
                  target.style.height = event.rect.height + 'px';

                  x += event.deltaRect.left;
                  y += event.deltaRect.top;

                  target.style.transform = 'translate(' + x + 'px,' + y + 'px)';

                  target.setAttribute('data-x', x);
                  target.setAttribute('data-y', y);
              });
          });
      });

      function removeElement(button) {
          button.parentElement.remove();
      }
    </script>
  </body>
</html>
